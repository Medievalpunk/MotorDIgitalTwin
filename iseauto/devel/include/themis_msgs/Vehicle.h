// Generated by gencpp from file themis_msgs/Vehicle.msg
// DO NOT EDIT!


#ifndef THEMIS_MSGS_MESSAGE_VEHICLE_H
#define THEMIS_MSGS_MESSAGE_VEHICLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <themis_msgs/State.h>
#include <themis_msgs/State.h>
#include <themis_msgs/VehicleMode.h>

namespace themis_msgs
{
template <class ContainerAllocator>
struct Vehicle_
{
  typedef Vehicle_<ContainerAllocator> Type;

  Vehicle_()
    : state()
    , speed(0.0)
    , drive_state()
    , brake_feedback(0)
    , imd_error(false)
    , mode()  {
    }
  Vehicle_(const ContainerAllocator& _alloc)
    : state(_alloc)
    , speed(0.0)
    , drive_state(_alloc)
    , brake_feedback(0)
    , imd_error(false)
    , mode(_alloc)  {
  (void)_alloc;
    }



   typedef  ::themis_msgs::State_<ContainerAllocator>  _state_type;
  _state_type state;

   typedef float _speed_type;
  _speed_type speed;

   typedef  ::themis_msgs::State_<ContainerAllocator>  _drive_state_type;
  _drive_state_type drive_state;

   typedef uint8_t _brake_feedback_type;
  _brake_feedback_type brake_feedback;

   typedef uint8_t _imd_error_type;
  _imd_error_type imd_error;

   typedef  ::themis_msgs::VehicleMode_<ContainerAllocator>  _mode_type;
  _mode_type mode;





  typedef boost::shared_ptr< ::themis_msgs::Vehicle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::themis_msgs::Vehicle_<ContainerAllocator> const> ConstPtr;

}; // struct Vehicle_

typedef ::themis_msgs::Vehicle_<std::allocator<void> > Vehicle;

typedef boost::shared_ptr< ::themis_msgs::Vehicle > VehiclePtr;
typedef boost::shared_ptr< ::themis_msgs::Vehicle const> VehicleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::themis_msgs::Vehicle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::themis_msgs::Vehicle_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace themis_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'themis_msgs': ['/home/user/milrem/src/themis_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::themis_msgs::Vehicle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::themis_msgs::Vehicle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::themis_msgs::Vehicle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::themis_msgs::Vehicle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::themis_msgs::Vehicle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::themis_msgs::Vehicle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::themis_msgs::Vehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f2f224fad34514175362e87aeae2016a";
  }

  static const char* value(const ::themis_msgs::Vehicle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf2f224fad3451417ULL;
  static const uint64_t static_value2 = 0x5362e87aeae2016aULL;
};

template<class ContainerAllocator>
struct DataType< ::themis_msgs::Vehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "themis_msgs/Vehicle";
  }

  static const char* value(const ::themis_msgs::Vehicle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::themis_msgs::Vehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "State state\n"
"float32 speed\n"
"State drive_state\n"
"uint8 brake_feedback\n"
"bool imd_error\n"
"VehicleMode mode\n"
"\n"
"================================================================================\n"
"MSG: themis_msgs/State\n"
"uint16 id\n"
"string desc\n"
"\n"
"================================================================================\n"
"MSG: themis_msgs/VehicleMode\n"
"State vehicle\n"
"State generator\n"
"State speed\n"
"State brake\n"
"State charge\n"
;
  }

  static const char* value(const ::themis_msgs::Vehicle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::themis_msgs::Vehicle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.speed);
      stream.next(m.drive_state);
      stream.next(m.brake_feedback);
      stream.next(m.imd_error);
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Vehicle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::themis_msgs::Vehicle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::themis_msgs::Vehicle_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    s << std::endl;
    Printer< ::themis_msgs::State_<ContainerAllocator> >::stream(s, indent + "  ", v.state);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "drive_state: ";
    s << std::endl;
    Printer< ::themis_msgs::State_<ContainerAllocator> >::stream(s, indent + "  ", v.drive_state);
    s << indent << "brake_feedback: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake_feedback);
    s << indent << "imd_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.imd_error);
    s << indent << "mode: ";
    s << std::endl;
    Printer< ::themis_msgs::VehicleMode_<ContainerAllocator> >::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // THEMIS_MSGS_MESSAGE_VEHICLE_H
