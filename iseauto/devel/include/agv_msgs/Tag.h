// Generated by gencpp from file agv_msgs/Tag.msg
// DO NOT EDIT!


#ifndef AGV_MSGS_MESSAGE_TAG_H
#define AGV_MSGS_MESSAGE_TAG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace agv_msgs
{
template <class ContainerAllocator>
struct Tag_
{
  typedef Tag_<ContainerAllocator> Type;

  Tag_()
    : header()
    , tag_addr()
    , anchor_addr()
    , dist_to_anchor(0.0)
    , tag_timestamp(0)  {
    }
  Tag_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , tag_addr(_alloc)
    , anchor_addr(_alloc)
    , dist_to_anchor(0.0)
    , tag_timestamp(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _tag_addr_type;
  _tag_addr_type tag_addr;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _anchor_addr_type;
  _anchor_addr_type anchor_addr;

   typedef float _dist_to_anchor_type;
  _dist_to_anchor_type dist_to_anchor;

   typedef int32_t _tag_timestamp_type;
  _tag_timestamp_type tag_timestamp;





  typedef boost::shared_ptr< ::agv_msgs::Tag_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_msgs::Tag_<ContainerAllocator> const> ConstPtr;

}; // struct Tag_

typedef ::agv_msgs::Tag_<std::allocator<void> > Tag;

typedef boost::shared_ptr< ::agv_msgs::Tag > TagPtr;
typedef boost::shared_ptr< ::agv_msgs::Tag const> TagConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_msgs::Tag_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_msgs::Tag_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace agv_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'agv_msgs': ['/home/user/milrem/src/agv_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::Tag_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_msgs::Tag_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::Tag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_msgs::Tag_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::Tag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_msgs::Tag_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_msgs::Tag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5c6cb49b278d3ac5d857f32bab6a3e0e";
  }

  static const char* value(const ::agv_msgs::Tag_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5c6cb49b278d3ac5ULL;
  static const uint64_t static_value2 = 0xd857f32bab6a3e0eULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_msgs::Tag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_msgs/Tag";
  }

  static const char* value(const ::agv_msgs::Tag_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_msgs::Tag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string tag_addr\n"
"string anchor_addr\n"
"float32 dist_to_anchor\n"
"int32 tag_timestamp\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::agv_msgs::Tag_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_msgs::Tag_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.tag_addr);
      stream.next(m.anchor_addr);
      stream.next(m.dist_to_anchor);
      stream.next(m.tag_timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Tag_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_msgs::Tag_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_msgs::Tag_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "tag_addr: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.tag_addr);
    s << indent << "anchor_addr: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.anchor_addr);
    s << indent << "dist_to_anchor: ";
    Printer<float>::stream(s, indent + "  ", v.dist_to_anchor);
    s << indent << "tag_timestamp: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tag_timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_MSGS_MESSAGE_TAG_H
