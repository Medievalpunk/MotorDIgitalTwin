# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from themis_msgs/Vehicle.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import themis_msgs.msg

class Vehicle(genpy.Message):
  _md5sum = "f2f224fad34514175362e87aeae2016a"
  _type = "themis_msgs/Vehicle"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """State state
float32 speed
State drive_state
uint8 brake_feedback
bool imd_error
VehicleMode mode

================================================================================
MSG: themis_msgs/State
uint16 id
string desc

================================================================================
MSG: themis_msgs/VehicleMode
State vehicle
State generator
State speed
State brake
State charge
"""
  __slots__ = ['state','speed','drive_state','brake_feedback','imd_error','mode']
  _slot_types = ['themis_msgs/State','float32','themis_msgs/State','uint8','bool','themis_msgs/VehicleMode']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state,speed,drive_state,brake_feedback,imd_error,mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Vehicle, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = themis_msgs.msg.State()
      if self.speed is None:
        self.speed = 0.
      if self.drive_state is None:
        self.drive_state = themis_msgs.msg.State()
      if self.brake_feedback is None:
        self.brake_feedback = 0
      if self.imd_error is None:
        self.imd_error = False
      if self.mode is None:
        self.mode = themis_msgs.msg.VehicleMode()
    else:
      self.state = themis_msgs.msg.State()
      self.speed = 0.
      self.drive_state = themis_msgs.msg.State()
      self.brake_feedback = 0
      self.imd_error = False
      self.mode = themis_msgs.msg.VehicleMode()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_H().pack(self.state.id))
      _x = self.state.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_fH().pack(_x.speed, _x.drive_state.id))
      _x = self.drive_state.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2BH().pack(_x.brake_feedback, _x.imd_error, _x.mode.vehicle.id))
      _x = self.mode.vehicle.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_H().pack(self.mode.generator.id))
      _x = self.mode.generator.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_H().pack(self.mode.speed.id))
      _x = self.mode.speed.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_H().pack(self.mode.brake.id))
      _x = self.mode.brake.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_H().pack(self.mode.charge.id))
      _x = self.mode.charge.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.state is None:
        self.state = themis_msgs.msg.State()
      if self.drive_state is None:
        self.drive_state = themis_msgs.msg.State()
      if self.mode is None:
        self.mode = themis_msgs.msg.VehicleMode()
      end = 0
      start = end
      end += 2
      (self.state.id,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state.desc = str[start:end].decode('utf-8')
      else:
        self.state.desc = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.speed, _x.drive_state.id,) = _get_struct_fH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.drive_state.desc = str[start:end].decode('utf-8')
      else:
        self.drive_state.desc = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.brake_feedback, _x.imd_error, _x.mode.vehicle.id,) = _get_struct_2BH().unpack(str[start:end])
      self.imd_error = bool(self.imd_error)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode.vehicle.desc = str[start:end].decode('utf-8')
      else:
        self.mode.vehicle.desc = str[start:end]
      start = end
      end += 2
      (self.mode.generator.id,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode.generator.desc = str[start:end].decode('utf-8')
      else:
        self.mode.generator.desc = str[start:end]
      start = end
      end += 2
      (self.mode.speed.id,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode.speed.desc = str[start:end].decode('utf-8')
      else:
        self.mode.speed.desc = str[start:end]
      start = end
      end += 2
      (self.mode.brake.id,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode.brake.desc = str[start:end].decode('utf-8')
      else:
        self.mode.brake.desc = str[start:end]
      start = end
      end += 2
      (self.mode.charge.id,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode.charge.desc = str[start:end].decode('utf-8')
      else:
        self.mode.charge.desc = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_H().pack(self.state.id))
      _x = self.state.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_fH().pack(_x.speed, _x.drive_state.id))
      _x = self.drive_state.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2BH().pack(_x.brake_feedback, _x.imd_error, _x.mode.vehicle.id))
      _x = self.mode.vehicle.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_H().pack(self.mode.generator.id))
      _x = self.mode.generator.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_H().pack(self.mode.speed.id))
      _x = self.mode.speed.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_H().pack(self.mode.brake.id))
      _x = self.mode.brake.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_H().pack(self.mode.charge.id))
      _x = self.mode.charge.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.state is None:
        self.state = themis_msgs.msg.State()
      if self.drive_state is None:
        self.drive_state = themis_msgs.msg.State()
      if self.mode is None:
        self.mode = themis_msgs.msg.VehicleMode()
      end = 0
      start = end
      end += 2
      (self.state.id,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.state.desc = str[start:end].decode('utf-8')
      else:
        self.state.desc = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.speed, _x.drive_state.id,) = _get_struct_fH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.drive_state.desc = str[start:end].decode('utf-8')
      else:
        self.drive_state.desc = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.brake_feedback, _x.imd_error, _x.mode.vehicle.id,) = _get_struct_2BH().unpack(str[start:end])
      self.imd_error = bool(self.imd_error)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode.vehicle.desc = str[start:end].decode('utf-8')
      else:
        self.mode.vehicle.desc = str[start:end]
      start = end
      end += 2
      (self.mode.generator.id,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode.generator.desc = str[start:end].decode('utf-8')
      else:
        self.mode.generator.desc = str[start:end]
      start = end
      end += 2
      (self.mode.speed.id,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode.speed.desc = str[start:end].decode('utf-8')
      else:
        self.mode.speed.desc = str[start:end]
      start = end
      end += 2
      (self.mode.brake.id,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode.brake.desc = str[start:end].decode('utf-8')
      else:
        self.mode.brake.desc = str[start:end]
      start = end
      end += 2
      (self.mode.charge.id,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode.charge.desc = str[start:end].decode('utf-8')
      else:
        self.mode.charge.desc = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_fH = None
def _get_struct_fH():
    global _struct_fH
    if _struct_fH is None:
        _struct_fH = struct.Struct("<fH")
    return _struct_fH
_struct_H = None
def _get_struct_H():
    global _struct_H
    if _struct_H is None:
        _struct_H = struct.Struct("<H")
    return _struct_H
_struct_2BH = None
def _get_struct_2BH():
    global _struct_2BH
    if _struct_2BH is None:
        _struct_2BH = struct.Struct("<2BH")
    return _struct_2BH
