// Generated by gencpp from file themis_msgs/ControlMsg.msg
// DO NOT EDIT!


#ifndef THEMIS_MSGS_MESSAGE_CONTROLMSG_H
#define THEMIS_MSGS_MESSAGE_CONTROLMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <themis_msgs/DriveControl.h>
#include <themis_msgs/SystemControl.h>
#include <themis_msgs/ModeControl.h>

namespace themis_msgs
{
template <class ContainerAllocator>
struct ControlMsg_
{
  typedef ControlMsg_<ContainerAllocator> Type;

  ControlMsg_()
    : timestamp(0)
    , drive()
    , system()
    , mode()  {
    }
  ControlMsg_(const ContainerAllocator& _alloc)
    : timestamp(0)
    , drive(_alloc)
    , system(_alloc)
    , mode(_alloc)  {
  (void)_alloc;
    }



   typedef uint64_t _timestamp_type;
  _timestamp_type timestamp;

   typedef  ::themis_msgs::DriveControl_<ContainerAllocator>  _drive_type;
  _drive_type drive;

   typedef  ::themis_msgs::SystemControl_<ContainerAllocator>  _system_type;
  _system_type system;

   typedef  ::themis_msgs::ModeControl_<ContainerAllocator>  _mode_type;
  _mode_type mode;





  typedef boost::shared_ptr< ::themis_msgs::ControlMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::themis_msgs::ControlMsg_<ContainerAllocator> const> ConstPtr;

}; // struct ControlMsg_

typedef ::themis_msgs::ControlMsg_<std::allocator<void> > ControlMsg;

typedef boost::shared_ptr< ::themis_msgs::ControlMsg > ControlMsgPtr;
typedef boost::shared_ptr< ::themis_msgs::ControlMsg const> ControlMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::themis_msgs::ControlMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::themis_msgs::ControlMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace themis_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'themis_msgs': ['/home/user/milrem/src/themis_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::themis_msgs::ControlMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::themis_msgs::ControlMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::themis_msgs::ControlMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::themis_msgs::ControlMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::themis_msgs::ControlMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::themis_msgs::ControlMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::themis_msgs::ControlMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eaa6a2d954fb548e6a569f42edcfb266";
  }

  static const char* value(const ::themis_msgs::ControlMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeaa6a2d954fb548eULL;
  static const uint64_t static_value2 = 0x6a569f42edcfb266ULL;
};

template<class ContainerAllocator>
struct DataType< ::themis_msgs::ControlMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "themis_msgs/ControlMsg";
  }

  static const char* value(const ::themis_msgs::ControlMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::themis_msgs::ControlMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 timestamp\n"
"DriveControl drive\n"
"SystemControl system\n"
"ModeControl mode\n"
"\n"
"================================================================================\n"
"MSG: themis_msgs/DriveControl\n"
"bool enable\n"
"float32 x_axis\n"
"float32 y_axis\n"
"bool tank_mode\n"
"\n"
"================================================================================\n"
"MSG: themis_msgs/SystemControl\n"
"bool high_voltage\n"
"bool fan_override\n"
"bool generator\n"
"bool work_lights\n"
"bool signal_lights\n"
"bool imd_override\n"
"\n"
"================================================================================\n"
"MSG: themis_msgs/ModeControl\n"
"uint8 vehicle\n"
"uint8 generator\n"
"uint8 speed\n"
"uint8 brake\n"
"uint8 charge\n"
;
  }

  static const char* value(const ::themis_msgs::ControlMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::themis_msgs::ControlMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.drive);
      stream.next(m.system);
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::themis_msgs::ControlMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::themis_msgs::ControlMsg_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "drive: ";
    s << std::endl;
    Printer< ::themis_msgs::DriveControl_<ContainerAllocator> >::stream(s, indent + "  ", v.drive);
    s << indent << "system: ";
    s << std::endl;
    Printer< ::themis_msgs::SystemControl_<ContainerAllocator> >::stream(s, indent + "  ", v.system);
    s << indent << "mode: ";
    s << std::endl;
    Printer< ::themis_msgs::ModeControl_<ContainerAllocator> >::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // THEMIS_MSGS_MESSAGE_CONTROLMSG_H
