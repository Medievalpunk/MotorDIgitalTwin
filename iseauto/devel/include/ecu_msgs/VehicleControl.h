// Generated by gencpp from file ecu_msgs/VehicleControl.msg
// DO NOT EDIT!


#ifndef ECU_MSGS_MESSAGE_VEHICLECONTROL_H
#define ECU_MSGS_MESSAGE_VEHICLECONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ecu_msgs/TrackControl.h>
#include <ecu_msgs/TrackControl.h>

namespace ecu_msgs
{
template <class ContainerAllocator>
struct VehicleControl_
{
  typedef VehicleControl_<ContainerAllocator> Type;

  VehicleControl_()
    : header()
    , track_right()
    , track_left()
    , breaks(false)
    , lights(false)  {
    }
  VehicleControl_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , track_right(_alloc)
    , track_left(_alloc)
    , breaks(false)
    , lights(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ecu_msgs::TrackControl_<ContainerAllocator>  _track_right_type;
  _track_right_type track_right;

   typedef  ::ecu_msgs::TrackControl_<ContainerAllocator>  _track_left_type;
  _track_left_type track_left;

   typedef uint8_t _breaks_type;
  _breaks_type breaks;

   typedef uint8_t _lights_type;
  _lights_type lights;





  typedef boost::shared_ptr< ::ecu_msgs::VehicleControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ecu_msgs::VehicleControl_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleControl_

typedef ::ecu_msgs::VehicleControl_<std::allocator<void> > VehicleControl;

typedef boost::shared_ptr< ::ecu_msgs::VehicleControl > VehicleControlPtr;
typedef boost::shared_ptr< ::ecu_msgs::VehicleControl const> VehicleControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ecu_msgs::VehicleControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ecu_msgs::VehicleControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ecu_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'ecu_msgs': ['/home/user/milrem/src/ecu_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ecu_msgs::VehicleControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ecu_msgs::VehicleControl_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ecu_msgs::VehicleControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ecu_msgs::VehicleControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ecu_msgs::VehicleControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ecu_msgs::VehicleControl_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ecu_msgs::VehicleControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c8b5113bd5fc6dbf622ebbca4f18f295";
  }

  static const char* value(const ::ecu_msgs::VehicleControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc8b5113bd5fc6dbfULL;
  static const uint64_t static_value2 = 0x622ebbca4f18f295ULL;
};

template<class ContainerAllocator>
struct DataType< ::ecu_msgs::VehicleControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ecu_msgs/VehicleControl";
  }

  static const char* value(const ::ecu_msgs::VehicleControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ecu_msgs::VehicleControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"TrackControl track_right\n"
"TrackControl track_left\n"
"bool breaks\n"
"bool lights\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ecu_msgs/TrackControl\n"
"float64 speed\n"
"bool break_status\n"
;
  }

  static const char* value(const ::ecu_msgs::VehicleControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ecu_msgs::VehicleControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.track_right);
      stream.next(m.track_left);
      stream.next(m.breaks);
      stream.next(m.lights);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ecu_msgs::VehicleControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ecu_msgs::VehicleControl_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "track_right: ";
    s << std::endl;
    Printer< ::ecu_msgs::TrackControl_<ContainerAllocator> >::stream(s, indent + "  ", v.track_right);
    s << indent << "track_left: ";
    s << std::endl;
    Printer< ::ecu_msgs::TrackControl_<ContainerAllocator> >::stream(s, indent + "  ", v.track_left);
    s << indent << "breaks: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.breaks);
    s << indent << "lights: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lights);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ECU_MSGS_MESSAGE_VEHICLECONTROL_H
