# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from themis_msgs/ControlMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import themis_msgs.msg

class ControlMsg(genpy.Message):
  _md5sum = "eaa6a2d954fb548e6a569f42edcfb266"
  _type = "themis_msgs/ControlMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint64 timestamp
DriveControl drive
SystemControl system
ModeControl mode

================================================================================
MSG: themis_msgs/DriveControl
bool enable
float32 x_axis
float32 y_axis
bool tank_mode

================================================================================
MSG: themis_msgs/SystemControl
bool high_voltage
bool fan_override
bool generator
bool work_lights
bool signal_lights
bool imd_override

================================================================================
MSG: themis_msgs/ModeControl
uint8 vehicle
uint8 generator
uint8 speed
uint8 brake
uint8 charge
"""
  __slots__ = ['timestamp','drive','system','mode']
  _slot_types = ['uint64','themis_msgs/DriveControl','themis_msgs/SystemControl','themis_msgs/ModeControl']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,drive,system,mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControlMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0
      if self.drive is None:
        self.drive = themis_msgs.msg.DriveControl()
      if self.system is None:
        self.system = themis_msgs.msg.SystemControl()
      if self.mode is None:
        self.mode = themis_msgs.msg.ModeControl()
    else:
      self.timestamp = 0
      self.drive = themis_msgs.msg.DriveControl()
      self.system = themis_msgs.msg.SystemControl()
      self.mode = themis_msgs.msg.ModeControl()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_QB2f12B().pack(_x.timestamp, _x.drive.enable, _x.drive.x_axis, _x.drive.y_axis, _x.drive.tank_mode, _x.system.high_voltage, _x.system.fan_override, _x.system.generator, _x.system.work_lights, _x.system.signal_lights, _x.system.imd_override, _x.mode.vehicle, _x.mode.generator, _x.mode.speed, _x.mode.brake, _x.mode.charge))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.drive is None:
        self.drive = themis_msgs.msg.DriveControl()
      if self.system is None:
        self.system = themis_msgs.msg.SystemControl()
      if self.mode is None:
        self.mode = themis_msgs.msg.ModeControl()
      end = 0
      _x = self
      start = end
      end += 29
      (_x.timestamp, _x.drive.enable, _x.drive.x_axis, _x.drive.y_axis, _x.drive.tank_mode, _x.system.high_voltage, _x.system.fan_override, _x.system.generator, _x.system.work_lights, _x.system.signal_lights, _x.system.imd_override, _x.mode.vehicle, _x.mode.generator, _x.mode.speed, _x.mode.brake, _x.mode.charge,) = _get_struct_QB2f12B().unpack(str[start:end])
      self.drive.enable = bool(self.drive.enable)
      self.drive.tank_mode = bool(self.drive.tank_mode)
      self.system.high_voltage = bool(self.system.high_voltage)
      self.system.fan_override = bool(self.system.fan_override)
      self.system.generator = bool(self.system.generator)
      self.system.work_lights = bool(self.system.work_lights)
      self.system.signal_lights = bool(self.system.signal_lights)
      self.system.imd_override = bool(self.system.imd_override)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_QB2f12B().pack(_x.timestamp, _x.drive.enable, _x.drive.x_axis, _x.drive.y_axis, _x.drive.tank_mode, _x.system.high_voltage, _x.system.fan_override, _x.system.generator, _x.system.work_lights, _x.system.signal_lights, _x.system.imd_override, _x.mode.vehicle, _x.mode.generator, _x.mode.speed, _x.mode.brake, _x.mode.charge))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.drive is None:
        self.drive = themis_msgs.msg.DriveControl()
      if self.system is None:
        self.system = themis_msgs.msg.SystemControl()
      if self.mode is None:
        self.mode = themis_msgs.msg.ModeControl()
      end = 0
      _x = self
      start = end
      end += 29
      (_x.timestamp, _x.drive.enable, _x.drive.x_axis, _x.drive.y_axis, _x.drive.tank_mode, _x.system.high_voltage, _x.system.fan_override, _x.system.generator, _x.system.work_lights, _x.system.signal_lights, _x.system.imd_override, _x.mode.vehicle, _x.mode.generator, _x.mode.speed, _x.mode.brake, _x.mode.charge,) = _get_struct_QB2f12B().unpack(str[start:end])
      self.drive.enable = bool(self.drive.enable)
      self.drive.tank_mode = bool(self.drive.tank_mode)
      self.system.high_voltage = bool(self.system.high_voltage)
      self.system.fan_override = bool(self.system.fan_override)
      self.system.generator = bool(self.system.generator)
      self.system.work_lights = bool(self.system.work_lights)
      self.system.signal_lights = bool(self.system.signal_lights)
      self.system.imd_override = bool(self.system.imd_override)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_QB2f12B = None
def _get_struct_QB2f12B():
    global _struct_QB2f12B
    if _struct_QB2f12B is None:
        _struct_QB2f12B = struct.Struct("<QB2f12B")
    return _struct_QB2f12B
