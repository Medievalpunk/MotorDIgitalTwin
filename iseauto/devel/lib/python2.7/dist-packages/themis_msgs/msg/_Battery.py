# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from themis_msgs/Battery.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import themis_msgs.msg

class Battery(genpy.Message):
  _md5sum = "12a9585c62ecbcc51a9af404d663e576"
  _type = "themis_msgs/Battery"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """State air_state
float32 low_voltage
float32 high_voltage
float32 charge_level

# uint16 UNDEFINED_STATE = 0
# uint16 INIT_STATE = 1
# uint16 OFF_STATE = 2
# uint16 SWITCH_ON_STATE = 3
# uint16 ON_STATE = 4
# uint16 SWITCH_OFF_STATE = 5
# uint16 CHARGE_STATE = 6

================================================================================
MSG: themis_msgs/State
uint16 id
string desc
"""
  __slots__ = ['air_state','low_voltage','high_voltage','charge_level']
  _slot_types = ['themis_msgs/State','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       air_state,low_voltage,high_voltage,charge_level

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Battery, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.air_state is None:
        self.air_state = themis_msgs.msg.State()
      if self.low_voltage is None:
        self.low_voltage = 0.
      if self.high_voltage is None:
        self.high_voltage = 0.
      if self.charge_level is None:
        self.charge_level = 0.
    else:
      self.air_state = themis_msgs.msg.State()
      self.low_voltage = 0.
      self.high_voltage = 0.
      self.charge_level = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_H().pack(self.air_state.id))
      _x = self.air_state.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.low_voltage, _x.high_voltage, _x.charge_level))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.air_state is None:
        self.air_state = themis_msgs.msg.State()
      end = 0
      start = end
      end += 2
      (self.air_state.id,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.air_state.desc = str[start:end].decode('utf-8')
      else:
        self.air_state.desc = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.low_voltage, _x.high_voltage, _x.charge_level,) = _get_struct_3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_H().pack(self.air_state.id))
      _x = self.air_state.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.low_voltage, _x.high_voltage, _x.charge_level))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.air_state is None:
        self.air_state = themis_msgs.msg.State()
      end = 0
      start = end
      end += 2
      (self.air_state.id,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.air_state.desc = str[start:end].decode('utf-8')
      else:
        self.air_state.desc = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.low_voltage, _x.high_voltage, _x.charge_level,) = _get_struct_3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_H = None
def _get_struct_H():
    global _struct_H
    if _struct_H is None:
        _struct_H = struct.Struct("<H")
    return _struct_H
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
