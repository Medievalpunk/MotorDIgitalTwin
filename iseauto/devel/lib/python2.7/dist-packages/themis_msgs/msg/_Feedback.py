# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from themis_msgs/Feedback.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import themis_msgs.msg
import std_msgs.msg

class Feedback(genpy.Message):
  _md5sum = "8b3115dccfc099de2189cfdd7df2ec24"
  _type = "themis_msgs/Feedback"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
Battery battery
Track left
Track right
Generator generator
Vehicle vehicle

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: themis_msgs/Battery
State air_state
float32 low_voltage
float32 high_voltage
float32 charge_level

# uint16 UNDEFINED_STATE = 0
# uint16 INIT_STATE = 1
# uint16 OFF_STATE = 2
# uint16 SWITCH_ON_STATE = 3
# uint16 ON_STATE = 4
# uint16 SWITCH_OFF_STATE = 5
# uint16 CHARGE_STATE = 6

================================================================================
MSG: themis_msgs/State
uint16 id
string desc

================================================================================
MSG: themis_msgs/Track
Sevcon sevcon
TrackPdm pdm

================================================================================
MSG: themis_msgs/Sevcon
uint16 hour_count
int32 real_rpm
float32 real_torque
float32 battery_current
float32 battery_voltage
int16 motor_temp
int8 temp

================================================================================
MSG: themis_msgs/TrackPdm
float32 track_coolant_temp
bool brake_status

================================================================================
MSG: themis_msgs/Generator
State state
float32 fuel_level
Sevcon sevcon
GeneratorPdm pdm

================================================================================
MSG: themis_msgs/GeneratorPdm
float32 motor_coolant_temp
float32 engine_coolant_temp

================================================================================
MSG: themis_msgs/Vehicle
State state
float32 speed
State drive_state
uint8 brake_feedback
bool imd_error
VehicleMode mode

================================================================================
MSG: themis_msgs/VehicleMode
State vehicle
State generator
State speed
State brake
State charge
"""
  __slots__ = ['header','battery','left','right','generator','vehicle']
  _slot_types = ['std_msgs/Header','themis_msgs/Battery','themis_msgs/Track','themis_msgs/Track','themis_msgs/Generator','themis_msgs/Vehicle']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,battery,left,right,generator,vehicle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Feedback, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.battery is None:
        self.battery = themis_msgs.msg.Battery()
      if self.left is None:
        self.left = themis_msgs.msg.Track()
      if self.right is None:
        self.right = themis_msgs.msg.Track()
      if self.generator is None:
        self.generator = themis_msgs.msg.Generator()
      if self.vehicle is None:
        self.vehicle = themis_msgs.msg.Vehicle()
    else:
      self.header = std_msgs.msg.Header()
      self.battery = themis_msgs.msg.Battery()
      self.left = themis_msgs.msg.Track()
      self.right = themis_msgs.msg.Track()
      self.generator = themis_msgs.msg.Generator()
      self.vehicle = themis_msgs.msg.Vehicle()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_H().pack(self.battery.air_state.id))
      _x = self.battery.air_state.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3fHi3fhbfBHi3fhbfBH().pack(_x.battery.low_voltage, _x.battery.high_voltage, _x.battery.charge_level, _x.left.sevcon.hour_count, _x.left.sevcon.real_rpm, _x.left.sevcon.real_torque, _x.left.sevcon.battery_current, _x.left.sevcon.battery_voltage, _x.left.sevcon.motor_temp, _x.left.sevcon.temp, _x.left.pdm.track_coolant_temp, _x.left.pdm.brake_status, _x.right.sevcon.hour_count, _x.right.sevcon.real_rpm, _x.right.sevcon.real_torque, _x.right.sevcon.battery_current, _x.right.sevcon.battery_voltage, _x.right.sevcon.motor_temp, _x.right.sevcon.temp, _x.right.pdm.track_coolant_temp, _x.right.pdm.brake_status, _x.generator.state.id))
      _x = self.generator.state.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_fHi3fhb2fH().pack(_x.generator.fuel_level, _x.generator.sevcon.hour_count, _x.generator.sevcon.real_rpm, _x.generator.sevcon.real_torque, _x.generator.sevcon.battery_current, _x.generator.sevcon.battery_voltage, _x.generator.sevcon.motor_temp, _x.generator.sevcon.temp, _x.generator.pdm.motor_coolant_temp, _x.generator.pdm.engine_coolant_temp, _x.vehicle.state.id))
      _x = self.vehicle.state.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_fH().pack(_x.vehicle.speed, _x.vehicle.drive_state.id))
      _x = self.vehicle.drive_state.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2BH().pack(_x.vehicle.brake_feedback, _x.vehicle.imd_error, _x.vehicle.mode.vehicle.id))
      _x = self.vehicle.mode.vehicle.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_H().pack(self.vehicle.mode.generator.id))
      _x = self.vehicle.mode.generator.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_H().pack(self.vehicle.mode.speed.id))
      _x = self.vehicle.mode.speed.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_H().pack(self.vehicle.mode.brake.id))
      _x = self.vehicle.mode.brake.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_H().pack(self.vehicle.mode.charge.id))
      _x = self.vehicle.mode.charge.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.battery is None:
        self.battery = themis_msgs.msg.Battery()
      if self.left is None:
        self.left = themis_msgs.msg.Track()
      if self.right is None:
        self.right = themis_msgs.msg.Track()
      if self.generator is None:
        self.generator = themis_msgs.msg.Generator()
      if self.vehicle is None:
        self.vehicle = themis_msgs.msg.Vehicle()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 2
      (self.battery.air_state.id,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.battery.air_state.desc = str[start:end].decode('utf-8')
      else:
        self.battery.air_state.desc = str[start:end]
      _x = self
      start = end
      end += 66
      (_x.battery.low_voltage, _x.battery.high_voltage, _x.battery.charge_level, _x.left.sevcon.hour_count, _x.left.sevcon.real_rpm, _x.left.sevcon.real_torque, _x.left.sevcon.battery_current, _x.left.sevcon.battery_voltage, _x.left.sevcon.motor_temp, _x.left.sevcon.temp, _x.left.pdm.track_coolant_temp, _x.left.pdm.brake_status, _x.right.sevcon.hour_count, _x.right.sevcon.real_rpm, _x.right.sevcon.real_torque, _x.right.sevcon.battery_current, _x.right.sevcon.battery_voltage, _x.right.sevcon.motor_temp, _x.right.sevcon.temp, _x.right.pdm.track_coolant_temp, _x.right.pdm.brake_status, _x.generator.state.id,) = _get_struct_3fHi3fhbfBHi3fhbfBH().unpack(str[start:end])
      self.left.pdm.brake_status = bool(self.left.pdm.brake_status)
      self.right.pdm.brake_status = bool(self.right.pdm.brake_status)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.generator.state.desc = str[start:end].decode('utf-8')
      else:
        self.generator.state.desc = str[start:end]
      _x = self
      start = end
      end += 35
      (_x.generator.fuel_level, _x.generator.sevcon.hour_count, _x.generator.sevcon.real_rpm, _x.generator.sevcon.real_torque, _x.generator.sevcon.battery_current, _x.generator.sevcon.battery_voltage, _x.generator.sevcon.motor_temp, _x.generator.sevcon.temp, _x.generator.pdm.motor_coolant_temp, _x.generator.pdm.engine_coolant_temp, _x.vehicle.state.id,) = _get_struct_fHi3fhb2fH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle.state.desc = str[start:end].decode('utf-8')
      else:
        self.vehicle.state.desc = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.vehicle.speed, _x.vehicle.drive_state.id,) = _get_struct_fH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle.drive_state.desc = str[start:end].decode('utf-8')
      else:
        self.vehicle.drive_state.desc = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.vehicle.brake_feedback, _x.vehicle.imd_error, _x.vehicle.mode.vehicle.id,) = _get_struct_2BH().unpack(str[start:end])
      self.vehicle.imd_error = bool(self.vehicle.imd_error)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle.mode.vehicle.desc = str[start:end].decode('utf-8')
      else:
        self.vehicle.mode.vehicle.desc = str[start:end]
      start = end
      end += 2
      (self.vehicle.mode.generator.id,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle.mode.generator.desc = str[start:end].decode('utf-8')
      else:
        self.vehicle.mode.generator.desc = str[start:end]
      start = end
      end += 2
      (self.vehicle.mode.speed.id,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle.mode.speed.desc = str[start:end].decode('utf-8')
      else:
        self.vehicle.mode.speed.desc = str[start:end]
      start = end
      end += 2
      (self.vehicle.mode.brake.id,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle.mode.brake.desc = str[start:end].decode('utf-8')
      else:
        self.vehicle.mode.brake.desc = str[start:end]
      start = end
      end += 2
      (self.vehicle.mode.charge.id,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle.mode.charge.desc = str[start:end].decode('utf-8')
      else:
        self.vehicle.mode.charge.desc = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_H().pack(self.battery.air_state.id))
      _x = self.battery.air_state.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3fHi3fhbfBHi3fhbfBH().pack(_x.battery.low_voltage, _x.battery.high_voltage, _x.battery.charge_level, _x.left.sevcon.hour_count, _x.left.sevcon.real_rpm, _x.left.sevcon.real_torque, _x.left.sevcon.battery_current, _x.left.sevcon.battery_voltage, _x.left.sevcon.motor_temp, _x.left.sevcon.temp, _x.left.pdm.track_coolant_temp, _x.left.pdm.brake_status, _x.right.sevcon.hour_count, _x.right.sevcon.real_rpm, _x.right.sevcon.real_torque, _x.right.sevcon.battery_current, _x.right.sevcon.battery_voltage, _x.right.sevcon.motor_temp, _x.right.sevcon.temp, _x.right.pdm.track_coolant_temp, _x.right.pdm.brake_status, _x.generator.state.id))
      _x = self.generator.state.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_fHi3fhb2fH().pack(_x.generator.fuel_level, _x.generator.sevcon.hour_count, _x.generator.sevcon.real_rpm, _x.generator.sevcon.real_torque, _x.generator.sevcon.battery_current, _x.generator.sevcon.battery_voltage, _x.generator.sevcon.motor_temp, _x.generator.sevcon.temp, _x.generator.pdm.motor_coolant_temp, _x.generator.pdm.engine_coolant_temp, _x.vehicle.state.id))
      _x = self.vehicle.state.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_fH().pack(_x.vehicle.speed, _x.vehicle.drive_state.id))
      _x = self.vehicle.drive_state.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2BH().pack(_x.vehicle.brake_feedback, _x.vehicle.imd_error, _x.vehicle.mode.vehicle.id))
      _x = self.vehicle.mode.vehicle.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_H().pack(self.vehicle.mode.generator.id))
      _x = self.vehicle.mode.generator.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_H().pack(self.vehicle.mode.speed.id))
      _x = self.vehicle.mode.speed.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_H().pack(self.vehicle.mode.brake.id))
      _x = self.vehicle.mode.brake.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_H().pack(self.vehicle.mode.charge.id))
      _x = self.vehicle.mode.charge.desc
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.battery is None:
        self.battery = themis_msgs.msg.Battery()
      if self.left is None:
        self.left = themis_msgs.msg.Track()
      if self.right is None:
        self.right = themis_msgs.msg.Track()
      if self.generator is None:
        self.generator = themis_msgs.msg.Generator()
      if self.vehicle is None:
        self.vehicle = themis_msgs.msg.Vehicle()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 2
      (self.battery.air_state.id,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.battery.air_state.desc = str[start:end].decode('utf-8')
      else:
        self.battery.air_state.desc = str[start:end]
      _x = self
      start = end
      end += 66
      (_x.battery.low_voltage, _x.battery.high_voltage, _x.battery.charge_level, _x.left.sevcon.hour_count, _x.left.sevcon.real_rpm, _x.left.sevcon.real_torque, _x.left.sevcon.battery_current, _x.left.sevcon.battery_voltage, _x.left.sevcon.motor_temp, _x.left.sevcon.temp, _x.left.pdm.track_coolant_temp, _x.left.pdm.brake_status, _x.right.sevcon.hour_count, _x.right.sevcon.real_rpm, _x.right.sevcon.real_torque, _x.right.sevcon.battery_current, _x.right.sevcon.battery_voltage, _x.right.sevcon.motor_temp, _x.right.sevcon.temp, _x.right.pdm.track_coolant_temp, _x.right.pdm.brake_status, _x.generator.state.id,) = _get_struct_3fHi3fhbfBHi3fhbfBH().unpack(str[start:end])
      self.left.pdm.brake_status = bool(self.left.pdm.brake_status)
      self.right.pdm.brake_status = bool(self.right.pdm.brake_status)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.generator.state.desc = str[start:end].decode('utf-8')
      else:
        self.generator.state.desc = str[start:end]
      _x = self
      start = end
      end += 35
      (_x.generator.fuel_level, _x.generator.sevcon.hour_count, _x.generator.sevcon.real_rpm, _x.generator.sevcon.real_torque, _x.generator.sevcon.battery_current, _x.generator.sevcon.battery_voltage, _x.generator.sevcon.motor_temp, _x.generator.sevcon.temp, _x.generator.pdm.motor_coolant_temp, _x.generator.pdm.engine_coolant_temp, _x.vehicle.state.id,) = _get_struct_fHi3fhb2fH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle.state.desc = str[start:end].decode('utf-8')
      else:
        self.vehicle.state.desc = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.vehicle.speed, _x.vehicle.drive_state.id,) = _get_struct_fH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle.drive_state.desc = str[start:end].decode('utf-8')
      else:
        self.vehicle.drive_state.desc = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.vehicle.brake_feedback, _x.vehicle.imd_error, _x.vehicle.mode.vehicle.id,) = _get_struct_2BH().unpack(str[start:end])
      self.vehicle.imd_error = bool(self.vehicle.imd_error)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle.mode.vehicle.desc = str[start:end].decode('utf-8')
      else:
        self.vehicle.mode.vehicle.desc = str[start:end]
      start = end
      end += 2
      (self.vehicle.mode.generator.id,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle.mode.generator.desc = str[start:end].decode('utf-8')
      else:
        self.vehicle.mode.generator.desc = str[start:end]
      start = end
      end += 2
      (self.vehicle.mode.speed.id,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle.mode.speed.desc = str[start:end].decode('utf-8')
      else:
        self.vehicle.mode.speed.desc = str[start:end]
      start = end
      end += 2
      (self.vehicle.mode.brake.id,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle.mode.brake.desc = str[start:end].decode('utf-8')
      else:
        self.vehicle.mode.brake.desc = str[start:end]
      start = end
      end += 2
      (self.vehicle.mode.charge.id,) = _get_struct_H().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vehicle.mode.charge.desc = str[start:end].decode('utf-8')
      else:
        self.vehicle.mode.charge.desc = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_H = None
def _get_struct_H():
    global _struct_H
    if _struct_H is None:
        _struct_H = struct.Struct("<H")
    return _struct_H
_struct_fH = None
def _get_struct_fH():
    global _struct_fH
    if _struct_fH is None:
        _struct_fH = struct.Struct("<fH")
    return _struct_fH
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2BH = None
def _get_struct_2BH():
    global _struct_2BH
    if _struct_2BH is None:
        _struct_2BH = struct.Struct("<2BH")
    return _struct_2BH
_struct_fHi3fhb2fH = None
def _get_struct_fHi3fhb2fH():
    global _struct_fHi3fhb2fH
    if _struct_fHi3fhb2fH is None:
        _struct_fHi3fhb2fH = struct.Struct("<fHi3fhb2fH")
    return _struct_fHi3fhb2fH
_struct_3fHi3fhbfBHi3fhbfBH = None
def _get_struct_3fHi3fhbfBHi3fhbfBH():
    global _struct_3fHi3fhbfBHi3fhbfBH
    if _struct_3fHi3fhbfBHi3fhbfBH is None:
        _struct_3fHi3fhbfBHi3fhbfBH = struct.Struct("<3fHi3fhbfBHi3fhbfBH")
    return _struct_3fHi3fhbfBHi3fhbfBH
