# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from themis_msgs/SystemControl.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SystemControl(genpy.Message):
  _md5sum = "c55c2f064ee67c58e2e454e066c5cc98"
  _type = "themis_msgs/SystemControl"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool high_voltage
bool fan_override
bool generator
bool work_lights
bool signal_lights
bool imd_override
"""
  __slots__ = ['high_voltage','fan_override','generator','work_lights','signal_lights','imd_override']
  _slot_types = ['bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       high_voltage,fan_override,generator,work_lights,signal_lights,imd_override

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SystemControl, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.high_voltage is None:
        self.high_voltage = False
      if self.fan_override is None:
        self.fan_override = False
      if self.generator is None:
        self.generator = False
      if self.work_lights is None:
        self.work_lights = False
      if self.signal_lights is None:
        self.signal_lights = False
      if self.imd_override is None:
        self.imd_override = False
    else:
      self.high_voltage = False
      self.fan_override = False
      self.generator = False
      self.work_lights = False
      self.signal_lights = False
      self.imd_override = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6B().pack(_x.high_voltage, _x.fan_override, _x.generator, _x.work_lights, _x.signal_lights, _x.imd_override))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.high_voltage, _x.fan_override, _x.generator, _x.work_lights, _x.signal_lights, _x.imd_override,) = _get_struct_6B().unpack(str[start:end])
      self.high_voltage = bool(self.high_voltage)
      self.fan_override = bool(self.fan_override)
      self.generator = bool(self.generator)
      self.work_lights = bool(self.work_lights)
      self.signal_lights = bool(self.signal_lights)
      self.imd_override = bool(self.imd_override)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6B().pack(_x.high_voltage, _x.fan_override, _x.generator, _x.work_lights, _x.signal_lights, _x.imd_override))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.high_voltage, _x.fan_override, _x.generator, _x.work_lights, _x.signal_lights, _x.imd_override,) = _get_struct_6B().unpack(str[start:end])
      self.high_voltage = bool(self.high_voltage)
      self.fan_override = bool(self.fan_override)
      self.generator = bool(self.generator)
      self.work_lights = bool(self.work_lights)
      self.signal_lights = bool(self.signal_lights)
      self.imd_override = bool(self.imd_override)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6B = None
def _get_struct_6B():
    global _struct_6B
    if _struct_6B is None:
        _struct_6B = struct.Struct("<6B")
    return _struct_6B
