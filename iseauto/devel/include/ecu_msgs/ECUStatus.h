// Generated by gencpp from file ecu_msgs/ECUStatus.msg
// DO NOT EDIT!


#ifndef ECU_MSGS_MESSAGE_ECUSTATUS_H
#define ECU_MSGS_MESSAGE_ECUSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ecu_msgs
{
template <class ContainerAllocator>
struct ECUStatus_
{
  typedef ECUStatus_<ContainerAllocator> Type;

  ECUStatus_()
    : sensors(false)
    , drive(false)
    , battery()
    , running(false)
    , quit(false)  {
    }
  ECUStatus_(const ContainerAllocator& _alloc)
    : sensors(false)
    , drive(false)
    , battery(_alloc)
    , running(false)
    , quit(false)  {
  (void)_alloc;
    }



   typedef uint8_t _sensors_type;
  _sensors_type sensors;

   typedef uint8_t _drive_type;
  _drive_type drive;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _battery_type;
  _battery_type battery;

   typedef uint8_t _running_type;
  _running_type running;

   typedef uint8_t _quit_type;
  _quit_type quit;





  typedef boost::shared_ptr< ::ecu_msgs::ECUStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ecu_msgs::ECUStatus_<ContainerAllocator> const> ConstPtr;

}; // struct ECUStatus_

typedef ::ecu_msgs::ECUStatus_<std::allocator<void> > ECUStatus;

typedef boost::shared_ptr< ::ecu_msgs::ECUStatus > ECUStatusPtr;
typedef boost::shared_ptr< ::ecu_msgs::ECUStatus const> ECUStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ecu_msgs::ECUStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ecu_msgs::ECUStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ecu_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'ecu_msgs': ['/home/user/milrem/src/ecu_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ecu_msgs::ECUStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ecu_msgs::ECUStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ecu_msgs::ECUStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ecu_msgs::ECUStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ecu_msgs::ECUStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ecu_msgs::ECUStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ecu_msgs::ECUStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "356fcc37a358f36076bdf62f35f15a0d";
  }

  static const char* value(const ::ecu_msgs::ECUStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x356fcc37a358f360ULL;
  static const uint64_t static_value2 = 0x76bdf62f35f15a0dULL;
};

template<class ContainerAllocator>
struct DataType< ::ecu_msgs::ECUStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ecu_msgs/ECUStatus";
  }

  static const char* value(const ::ecu_msgs::ECUStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ecu_msgs::ECUStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool sensors\n"
"bool drive\n"
"string battery\n"
"bool running\n"
"bool quit\n"
"\n"
;
  }

  static const char* value(const ::ecu_msgs::ECUStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ecu_msgs::ECUStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sensors);
      stream.next(m.drive);
      stream.next(m.battery);
      stream.next(m.running);
      stream.next(m.quit);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ECUStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ecu_msgs::ECUStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ecu_msgs::ECUStatus_<ContainerAllocator>& v)
  {
    s << indent << "sensors: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sensors);
    s << indent << "drive: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.drive);
    s << indent << "battery: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.battery);
    s << indent << "running: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.running);
    s << indent << "quit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.quit);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ECU_MSGS_MESSAGE_ECUSTATUS_H
