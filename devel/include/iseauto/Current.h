// Generated by gencpp from file iseauto/Current.msg
// DO NOT EDIT!


#ifndef ISEAUTO_MESSAGE_CURRENT_H
#define ISEAUTO_MESSAGE_CURRENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace iseauto
{
template <class ContainerAllocator>
struct Current_
{
  typedef Current_<ContainerAllocator> Type;

  Current_()
    : current1(0.0)
    , current2(0.0)
    , current3(0.0)  {
    }
  Current_(const ContainerAllocator& _alloc)
    : current1(0.0)
    , current2(0.0)
    , current3(0.0)  {
  (void)_alloc;
    }



   typedef float _current1_type;
  _current1_type current1;

   typedef float _current2_type;
  _current2_type current2;

   typedef float _current3_type;
  _current3_type current3;





  typedef boost::shared_ptr< ::iseauto::Current_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iseauto::Current_<ContainerAllocator> const> ConstPtr;

}; // struct Current_

typedef ::iseauto::Current_<std::allocator<void> > Current;

typedef boost::shared_ptr< ::iseauto::Current > CurrentPtr;
typedef boost::shared_ptr< ::iseauto::Current const> CurrentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iseauto::Current_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iseauto::Current_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::iseauto::Current_<ContainerAllocator1> & lhs, const ::iseauto::Current_<ContainerAllocator2> & rhs)
{
  return lhs.current1 == rhs.current1 &&
    lhs.current2 == rhs.current2 &&
    lhs.current3 == rhs.current3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::iseauto::Current_<ContainerAllocator1> & lhs, const ::iseauto::Current_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace iseauto

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::iseauto::Current_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iseauto::Current_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iseauto::Current_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iseauto::Current_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iseauto::Current_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iseauto::Current_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iseauto::Current_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d72878699e445dfbd8b757130d3ba7c0";
  }

  static const char* value(const ::iseauto::Current_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd72878699e445dfbULL;
  static const uint64_t static_value2 = 0xd8b757130d3ba7c0ULL;
};

template<class ContainerAllocator>
struct DataType< ::iseauto::Current_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iseauto/Current";
  }

  static const char* value(const ::iseauto::Current_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iseauto::Current_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 current1\n"
"float32 current2\n"
"float32 current3\n"
;
  }

  static const char* value(const ::iseauto::Current_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iseauto::Current_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.current1);
      stream.next(m.current2);
      stream.next(m.current3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Current_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iseauto::Current_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iseauto::Current_<ContainerAllocator>& v)
  {
    s << indent << "current1: ";
    Printer<float>::stream(s, indent + "  ", v.current1);
    s << indent << "current2: ";
    Printer<float>::stream(s, indent + "  ", v.current2);
    s << indent << "current3: ";
    Printer<float>::stream(s, indent + "  ", v.current3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ISEAUTO_MESSAGE_CURRENT_H
