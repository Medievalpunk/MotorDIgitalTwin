# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from themis_msgs/Track.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import themis_msgs.msg

class Track(genpy.Message):
  _md5sum = "aa218d79e211eae1ef0c9fb3af2a36a1"
  _type = "themis_msgs/Track"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Sevcon sevcon
TrackPdm pdm

================================================================================
MSG: themis_msgs/Sevcon
uint16 hour_count
int32 real_rpm
float32 real_torque
float32 battery_current
float32 battery_voltage
int16 motor_temp
int8 temp

================================================================================
MSG: themis_msgs/TrackPdm
float32 track_coolant_temp
bool brake_status
"""
  __slots__ = ['sevcon','pdm']
  _slot_types = ['themis_msgs/Sevcon','themis_msgs/TrackPdm']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sevcon,pdm

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Track, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sevcon is None:
        self.sevcon = themis_msgs.msg.Sevcon()
      if self.pdm is None:
        self.pdm = themis_msgs.msg.TrackPdm()
    else:
      self.sevcon = themis_msgs.msg.Sevcon()
      self.pdm = themis_msgs.msg.TrackPdm()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Hi3fhbfB().pack(_x.sevcon.hour_count, _x.sevcon.real_rpm, _x.sevcon.real_torque, _x.sevcon.battery_current, _x.sevcon.battery_voltage, _x.sevcon.motor_temp, _x.sevcon.temp, _x.pdm.track_coolant_temp, _x.pdm.brake_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.sevcon is None:
        self.sevcon = themis_msgs.msg.Sevcon()
      if self.pdm is None:
        self.pdm = themis_msgs.msg.TrackPdm()
      end = 0
      _x = self
      start = end
      end += 26
      (_x.sevcon.hour_count, _x.sevcon.real_rpm, _x.sevcon.real_torque, _x.sevcon.battery_current, _x.sevcon.battery_voltage, _x.sevcon.motor_temp, _x.sevcon.temp, _x.pdm.track_coolant_temp, _x.pdm.brake_status,) = _get_struct_Hi3fhbfB().unpack(str[start:end])
      self.pdm.brake_status = bool(self.pdm.brake_status)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Hi3fhbfB().pack(_x.sevcon.hour_count, _x.sevcon.real_rpm, _x.sevcon.real_torque, _x.sevcon.battery_current, _x.sevcon.battery_voltage, _x.sevcon.motor_temp, _x.sevcon.temp, _x.pdm.track_coolant_temp, _x.pdm.brake_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.sevcon is None:
        self.sevcon = themis_msgs.msg.Sevcon()
      if self.pdm is None:
        self.pdm = themis_msgs.msg.TrackPdm()
      end = 0
      _x = self
      start = end
      end += 26
      (_x.sevcon.hour_count, _x.sevcon.real_rpm, _x.sevcon.real_torque, _x.sevcon.battery_current, _x.sevcon.battery_voltage, _x.sevcon.motor_temp, _x.sevcon.temp, _x.pdm.track_coolant_temp, _x.pdm.brake_status,) = _get_struct_Hi3fhbfB().unpack(str[start:end])
      self.pdm.brake_status = bool(self.pdm.brake_status)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Hi3fhbfB = None
def _get_struct_Hi3fhbfB():
    global _struct_Hi3fhbfB
    if _struct_Hi3fhbfB is None:
        _struct_Hi3fhbfB = struct.Struct("<Hi3fhbfB")
    return _struct_Hi3fhbfB
